#include <iostream>
using namespace std; 

struct Node {    
    int data;  
    Node* next;  
    
    Node(int a){ 
        data = a;   
        next = NULL;   
    } 
};  
    
void printLL(Node* head){  
    Node* p = head; 
    while(p != NULL){       
        cout << p->data << " ";  
        p = p->next;  
    }
} 

void printLLCircular(Node* head){
    if (head == NULL) return;
    Node* p = head;
    do {
        cout << p->data << " ";
        p = p->next;
    } while (p != head);
    cout << endl;
}

void insertionInLL(Node* head, int pos , int val){ 
    Node* p = head;     
    Node* q = nullptr; 
    
    for(int i = 1; i < pos; i++){    
        q = p;      
        p = p->next;
    }
     
    Node* newNode = new Node(val); 
    newNode->next = p;   
    q->next = newNode; 
}

void insertionHead(Node* head, int val){  
    Node* newNode = new Node(val);  
    newNode->next = head;   
    head = newNode;
} 


void deletion(Node*& head, int pos){
    if (head == NULL) return;

    Node* p = head;
    Node* q = NULL;

    // Case 1: Delete head
    if (pos == 1){
        // Only one node
        if (head->next == head){
            delete head;
            head = NULL;
            return;
        }

        // Find last node
        while (p->next != head){
            p = p->next;
        }

        Node* temp = head;
        p->next = head->next;
        head = head->next;
        delete temp;
        return;
    }

    // Case 2: Delete non-head
    p = head;
    for (int i = 1; i < pos; i++){
        q = p;
        p = p->next;

        if (p == head){  
            return;
        }
    }

    q->next = p->next;
    delete p;
}

void insertionAtHead(Node* head, int val){
    Node* p = head;
    
    while(p->next != head){
        p = p->next;
    }
    Node* newNode = new Node(val);
    p->next = newNode;
    newNode->next = head;
    head = newNode;
}
      
int main(){   
    Node* head = new Node(12); 
    head->next = new Node(22);  
    head->next->next = new Node(32);   
    head->next->next->next = new Node(42);   
    head->next->next->next->next = new Node(52); 
    
    // Make circular
    head->next->next->next->next->next = head;
  
    printLLCircular(head);
    
    int pos = 3;
    deletion(head, pos);

    printLLCircular(head);
    
    return 0;
}

